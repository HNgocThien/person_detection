from ultralytics import YOLO
import cv2
import sys
import os
import numpy as np

def predict_image(image_path, model):
    # In th√¥ng b√°o ƒëang d·ª± ƒëo√°n
    print(f"üîç ƒêang d·ª± ƒëo√°n: {image_path}")
    image = cv2.imread(image_path)
    results = model.predict(source=image, save=False)

    for result in results:
        if result.masks is not None:  # Ki·ªÉm tra xem c√≥ m·∫∑t n·∫° ph√¢n ƒëo·∫°n hay kh√¥ng
            masks = result.masks.data.cpu().numpy()  # L·∫•y m·∫∑t n·∫° ph√¢n ƒëo·∫°n
            boxes = result.boxes.xyxy.cpu().numpy()   # L·∫•y h·ªôp gi·ªõi h·∫°n
            scores = result.boxes.conf.cpu().numpy()  # L·∫•y ƒëi·ªÉm tin c·∫≠y
            labels = result.boxes.cls.cpu().numpy()   # L·∫•y nh√£n l·ªõp

            # T·∫°o l·ªõp ph·ªß m√†u cho ph√¢n ƒëo·∫°n
            overlay = np.zeros_like(image)
            
            for mask, box, score, label in zip(masks, boxes, scores, labels):
                # Chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc m·∫∑t n·∫°
                mask = cv2.resize(mask, (image.shape[1], image.shape[0]), interpolation=cv2.INTER_NEAREST)
                mask = mask.astype(bool)
                
                # T·∫°o m√†u ng·∫´u nhi√™n cho m·∫∑t n·∫°
                color = np.random.randint(0, 255, (3), dtype=np.uint8)
                
                # √Åp d·ª•ng m·∫∑t n·∫° l√™n l·ªõp ph·ªß
                overlay[mask] = color
                
                # V·∫Ω h·ªôp gi·ªõi h·∫°n v√† nh√£n
                x1, y1, x2, y2 = map(int, box)
                cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(image, f"{model.names[int(label)]} {score:.2f}", 
                           (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

            # Tr·ªôn ·∫£nh g·ªëc v·ªõi l·ªõp ph·ªß
            alpha = 0.4  # H·ªá s·ªë trong su·ªët
            image = cv2.addWeighted(image, 1, overlay, alpha, 0)

    # L∆∞u k·∫øt qu·∫£
    os.makedirs("results", exist_ok=True)
    output_name = os.path.basename(image_path)
    output_path = os.path.join("results", output_name)
    cv2.imwrite(output_path, image)
    # In th√¥ng b√°o ƒë√£ l∆∞u
    print(f"‚úÖ ƒê√£ l∆∞u v√†o: {output_path}")

def main(path, model_path=r"D:\THIEN_PROJECT\person_detection\runs\weights\best.pt"):
    model = YOLO(model_path)

    if os.path.isfile(path):
        predict_image(path, model)
    elif os.path.isdir(path):
        for file_name in os.listdir(path):
            if file_name.lower().endswith(('.jpg', '.png', '.jpeg')):
                image_path = os.path.join(path, file_name)
                predict_image(image_path, model)
    else:
        # In th√¥ng b√°o l·ªói n·∫øu ƒë∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá
        print(f"‚ùå ƒê∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá: {path}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        # In h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        print("C√°ch d√πng: python predict_segment.py ƒë∆∞·ªùng_d·∫´n_ƒë·∫øn_·∫£nh_ho·∫∑c_th∆∞_m·ª•c")
    else:
        main(sys.argv[1])