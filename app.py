import streamlit as st
from ultralytics import YOLO
import cv2
import os
import numpy as np
from PIL import Image
import shutil

# H√†m d·ª± ƒëo√°n cho m·ªôt ·∫£nh
def predict_image(image_path, model):
    # In th√¥ng b√°o ƒëang d·ª± ƒëo√°n
    st.write(f"üîç ƒêang d·ª± ƒëo√°n: {image_path}")
    image = cv2.imread(image_path)
    results = model.predict(source=image, save=False)

    for result in results:
        if result.masks is not None:  # Ki·ªÉm tra xem c√≥ m·∫∑t n·∫° ph√¢n ƒëo·∫°n hay kh√¥ng
            masks = result.masks.data.cpu().numpy()  # L·∫•y m·∫∑t n·∫° ph√¢n ƒëo·∫°n
            boxes = result.boxes.xyxy.cpu().numpy()   # L·∫•y h·ªôp gi·ªõi h·∫°n
            scores = result.boxes.conf.cpu().numpy()  # L·∫•y ƒëi·ªÉm tin c·∫≠y
            labels = result.boxes.cls.cpu().numpy()   # L·∫•y nh√£n l·ªõp

            # T·∫°o l·ªõp ph·ªß m√†u cho ph√¢n ƒëo·∫°n
            overlay = np.zeros_like(image)
            
            for mask, box, score, label in zip(masks, boxes, scores, labels):
                # Chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc m·∫∑t n·∫°
                mask = cv2.resize(mask, (image.shape[1], image.shape[0]), interpolation=cv2.INTER_NEAREST)
                mask = mask.astype(bool)
                
                # T·∫°o m√†u ng·∫´u nhi√™n cho m·∫∑t n·∫°
                color = np.random.randint(0, 255, (3), dtype=np.uint8)
                
                # √Åp d·ª•ng m·∫∑t n·∫° l√™n l·ªõp ph·ªß
                overlay[mask] = color
                
                # V·∫Ω h·ªôp gi·ªõi h·∫°n v√† nh√£n
                x1, y1, x2, y2 = map(int, box)
                cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(image, f"{model.names[int(label)]} {score:.2f}", 
                           (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

            # Tr·ªôn ·∫£nh g·ªëc v·ªõi l·ªõp ph·ªß
            alpha = 0.4  # H·ªá s·ªë trong su·ªët
            image = cv2.addWeighted(image, 1, overlay, alpha, 0)

    # L∆∞u k·∫øt qu·∫£
    os.makedirs("ket_qua", exist_ok=True)
    output_name = os.path.basename(image_path)
    output_path = os.path.join("ket_qua", output_name)
    cv2.imwrite(output_path, image)
    # In th√¥ng b√°o ƒë√£ l∆∞u
    st.write(f"‚úÖ ƒê√£ l∆∞u v√†o: {output_path}")
    return image, output_path

# ·ª®ng d·ª•ng Streamlit
def main():
    st.title("·ª®ng D·ª•ng Nh·∫≠n Di·ªán Ph√¢n ƒêo·∫°n YOLO")
    st.write("T·∫£i l√™n m·ªôt ·∫£nh ho·∫∑c th∆∞ m·ª•c ch·ª©a ·∫£nh ƒë·ªÉ nh·∫≠n di·ªán ph√¢n ƒëo·∫°n.")

    # Nh·∫≠p ƒë∆∞·ªùng d·∫´n m√¥ h√¨nh
    model_path = st.text_input("ƒê∆∞·ªùng d·∫´n ƒë·∫øn file m√¥ h√¨nh YOLO (.pt)", 
                              r"D:\THIEN_PROJECT\person_detection\runs\weights\best.pt")
    
    # T·∫£i m√¥ h√¨nh
    try:
        model = YOLO(model_path)
    except Exception as e:
        st.error(f"‚ùå L·ªói khi t·∫£i m√¥ h√¨nh: {str(e)}")
        return

    # T√πy ch·ªçn t·∫£i l√™n
    upload_type = st.radio("Ch·ªçn lo·∫°i t·∫£i l√™n:", ("T·ªáp ·∫£nh", "Th∆∞ m·ª•c ch·ª©a ·∫£nh"))

    if upload_type == "T·ªáp ·∫£nh":
        uploaded_file = st.file_uploader("Ch·ªçn m·ªôt t·ªáp ·∫£nh (jpg, png, jpeg)", type=["jpg", "png", "jpeg"])
        
        if uploaded_file is not None:
            # L∆∞u ·∫£nh t·∫°m th·ªùi
            temp_dir = "temp"
            os.makedirs(temp_dir, exist_ok=True)
            image_path = os.path.join(temp_dir, uploaded_file.name)
            with open(image_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            # Hi·ªÉn th·ªã ·∫£nh g·ªëc
            st.subheader("·∫¢nh G·ªëc")
            st.image(Image.open(image_path), use_column_width=True)

            # D·ª± ƒëo√°n v√† hi·ªÉn th·ªã k·∫øt qu·∫£
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                result_image, output_path = predict_image(image_path, model)
            
            # Hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£
            st.subheader("K·∫øt Qu·∫£ Nh·∫≠n Di·ªán")
            st.image(Image.open(output_path), use_column_width=True)

            # X√≥a t·ªáp t·∫°m
            os.remove(image_path)

    else:  # Th∆∞ m·ª•c ch·ª©a ·∫£nh
        uploaded_folder = st.file_uploader("T·∫£i l√™n th∆∞ m·ª•c ch·ª©a ·∫£nh (zip)", type=["zip"])
        
        if uploaded_folder is not None:
            # Gi·∫£i n√©n th∆∞ m·ª•c
            temp_dir = "temp_folder"
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
            os.makedirs(temp_dir, exist_ok=True)
            
            zip_path = os.path.join(temp_dir, uploaded_folder.name)
            with open(zip_path, "wb") as f:
                f.write(uploaded_folder.getbuffer())
            
            import zipfile
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(temp_dir)
            
            # T√¨m t·∫•t c·∫£ ·∫£nh trong th∆∞ m·ª•c
            image_files = [f for f in os.listdir(temp_dir) if f.lower().endswith(('.jpg', '.png', '.jpeg'))]
            
            if not image_files:
                st.warning("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh trong th∆∞ m·ª•c!")
            else:
                st.subheader("K·∫øt Qu·∫£ Nh·∫≠n Di·ªán")
                for file_name in image_files:
                    image_path = os.path.join(temp_dir, file_name)
                    
                    # Hi·ªÉn th·ªã ·∫£nh g·ªëc
                    st.write(f"**·∫¢nh G·ªëc: {file_name}**")
                    st.image(Image.open(image_path), use_column_width=True)
                    
                    # D·ª± ƒëo√°n v√† hi·ªÉn th·ªã k·∫øt qu·∫£
                    with st.spinner(f"ƒêang x·ª≠ l√Ω {file_name}..."):
                        result_image, output_path = predict_image(image_path, model)
                    
                    # Hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£
                    st.write(f"**K·∫øt Qu·∫£: {file_name}**")
                    st.image(Image.open(output_path), use_column_width=True)
            
            # X√≥a th∆∞ m·ª•c t·∫°m
            shutil.rmtree(temp_dir)

if __name__ == "__main__":
    main()